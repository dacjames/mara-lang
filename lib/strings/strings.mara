end string

###
# strings module

The strings module provides several objects for working with characters and strings.

- String
  implimented for three datums:
    - Symbol (interned, immutable array of bytes)
    - Text (immutable tree of utf-8 code points)
    - Char.Array

- Char
  implimented for two datums:
    - Rune utf-code point, TODO: rune encoding
    - Byte type of UInt8, unknown encoding


###

module strings

import strings_impl/(Text, Symbol, Char.Array)
import chars_impl/(Rune, Byte)

export {
    String
    Text
    Symbol
    Char.Array
    Rune
    Byte
}


trait String =
    & Collection
    & StringFunctions
    & StringShortcuts



trait String::StringFunctions {

    def replace String -> String
    def find String -> String?
    def contains String -> Bool

    contains(string) = match (this.find string)
        as item! true
        as ?     false

    def upper -> String
    def lower -> String

    def like String | Regex -> Bool

    def startswith String | Regex -> Bool
    def endswith String | Regex -> Bool
}

trait StringLiteral::StringShortcuts {
    def c = this.value.to Char.Array
    def t = this.value.to Text
    def s = this.value.to Symbol
    def f = this.value.format
    def r = this.value.to Regex
}




def Symbol::to Text = this.c.decode 'utf8'
def Symbol::to Char.Array = this.elements




end
