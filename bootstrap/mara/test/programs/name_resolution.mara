module test

object Point {
    use Property

    val x Int
    val y Int
}

def Point::plus (that Point) {
    etc
}

proto PlusTwo {
    def minus (a Point, b Point) {
        etc
    }

    def plus (a Point, b Point) {
        etc
    }

    def times(a Point, b Point) {
        Point.new(x: a.x * b.x, y: a.x * b.x)
    }

    def divide(a Point, b Point) {
        etc
    }
}

trait Pointy {
    def x () Int
    def y () Int

    def minus (that This) {
        Point.new (
            x: (this.x + that.x),
            y: (this.y + that.y),
        )
    }

    def plus (that This) {
        etc
    }

    def times (that This) {
        etc
    }

    def divide (that This) {
        etc
    }

}



def Point::divide (that Point) {
    Point.new (x: this.x + that.x, y: this.x + that.x)
}

def test () {

    a = Point(Int).new (0, 0)
    ###
    Interface {
        def test.Property.x(this Int)
        def test.Property.y(this Int)

        def test.Pointy.minus(a Int, Int)
        def test.test.plus(a Int, b Int)
        def test.PlusTwo.times(a Int, b Int)
        def test.Point.div(this Int, that Point)
    }
    ###

    b = Point(Int).new (1, 1)

    def plus(a Point, b Point) {
        Point.new (x: a.x - b.x, y: a.x - b.y)
    }

    a - b   # plus(a, b)
    a + b   # Pointy.minus(a, b)
    a * b   # PlusTwo.times(a, b)
    a / b   # Point::divide(a, b)
}

end

