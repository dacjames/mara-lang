module order

trait Comparable {

  def compare -> Int

  def eq  { this.compare == 0 }
  def neq { this.compare != 0 }
  def gt  { this.compare >  0 }
  def lt  { this.compare <  0 }
  def lteq{ this.compare <= 0 }
  def gteq{ this.compare >= 0 }
}

trait ComparePair(T, U) {
  def _0 -> T
  def _1 -> U

  let a = ._0
  let b = ._1

  compare = match
    as a < b then -1
    as a == b then 0
    else 1

  compare = match
    as a > b then 1
    as a == b then 0
    else -1

  compare = match
    as a > b then 1
    as a < b then -1
    else 0
}

end
