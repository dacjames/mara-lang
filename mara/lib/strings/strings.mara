###
# strings module

The strings module provides several objects for working with characters and strings.

- String
  implimented for three objects:
    - Symbol (interned, immutable array of Latin1 chars)
    - Text (immutable, using a flexible tree based internal structure)
    - Byte.Array

- Char
  implimented for tree objects:
    - Rune: Unicode code point
    - Byte: alias of UInt8, unknown encoding
    - Latin: single byte character


###

module strings

import 'strings_impl.(Text, Symbol, Char.Array)'
import 'chars_impl.(Rune, Byte)'


trait String =
    & Collection
    & StringFunctions
    & StringShortcuts



trait String::StringFunctions {

    def replace String -> String
    def find String -> String?
    def contains String -> Bool

    contains(string) =
        match (this.find string)
        as _.Yes { true }
        as No { false }

    def upper -> String
    def lower -> String

    def like String | Regex -> Bool

    def startswith String | Regex -> Bool
    def endswith String | Regex -> Bool
}

trait StringLiteral::StringShortcuts {
    def c = this.value.to Char.Array
    def t = this.value.to Text
    def s = this.value.to Symbol
    def f = this.value.format
    def r = this.value.to Regex
}


def Symbol::to Text = this.c.decode 'latin1'
def Symbol::to Char.Array = this.elements


end
