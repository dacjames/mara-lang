module impl
using Collection

object(T) LinkedList =
    | ListNode(T)
    | Nil

object(T) ListNode {
    head T
    tail This
}

def LinkedList = nil

def ListNode::get index =
    match   index
    as 0    this.head
    else    self(index - 1)

def Nil::get index = fail IndexError

end impl



module example

depend 'random.seed'

a = random.matrix


end example


module

trait Collection(Index, Elem) {
    def get (Index) -> Elem
    def put (Elem, Index) -> Elem
    def del (Index) -> Elem

    def first -> Elem
    def tail -> This
    def body -> This
    def last -> Elem

    def push (Elem) -> This | (Elem, This)
    def pop  (Elem) -> This | (Elem, This)

    def add (Elem) -> This | (Elem, This)
    def pull (Elem) -> This | (Elem, This)

    def peak (Elem) -> Elem.Maybe
    def look (Elem) -> Elem.Maybe
}

end

module test

list = [1, 2, 3]


list.first === 1
list.body === [1, 2]
list.tail === [2, 3]
list.last === 3

list.first << list.tail === list.body >> list.last


[1, 2] << 0 === 0 << [1, 2] === [0, 1, 2]
[1, 2] >> 3 === 3 << [1, 2] === [1, 2, 3]

end
