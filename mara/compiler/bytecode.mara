module llvm

module private

macro TypeOpcode8(format_number Int) {
    assert (1 .. 4).has format_number

    pack Int8 {
        type Bits(2)
        opcode Bits(6)
    }
}

end private

module impl
##
# This format encodes the opcode, type and a single operand into a single uint32:
##
datum Format0 {
    pack Uint32 {
        @constant
        val type Bits(format) {0}
        val opcode Bits(30)
    }

    ##
    # Provides the slot number of the result type of the instruction.
    pack Uint32 {
        val value Bits(24)
        val padding Bits(8)
    }

    ##
    # The number of operands that follow.
    length Int32

    ##
    # The slot number of the value(s) for the operand(s).
    items Chunk(length)
}

##
# This format encodes the opcode, type and a single operand into a single uint32:
##
datum Format1 {
    pack Uint32 {
        use TypeOpcode8(1)
        val type Int8
        val _0 Int8
        val _1 Int8
    }
}

##
# This format encodes the opcode, type and two operands into a single uint32:
##
datum Format2 {
    ##
    pack Int64 {
        use TypeOpcode8(1)
        val type Int8
        val _0 Int8
        val _1 Int8
        val _2 Int8
        val padding Bits(24)
    }
}

##
# This format encodes the opcode, type and three operands into a single uint32:
##
datum Format3 {
    ##
    pack Int64 {
        use TypeOpcode8(1)
        val type Int8
        val _0 Int8
        val _1 Int8
        val _2 Int8
        val _3 Int8
        val padding Bits(16)
    }
}

end impl

module

trait Bytecode {
    op Int8
    args List[Int8]
}

$for T in [
    Format0,
    Format1,
    Format2,
    Format3,
] { T::op = this.opcode.convert Int8 }

Format0::args = Array(this.items, this.length)
Format1::args = [this._0, this._1]
Format2::args = [this._0, this._1, this._2]
Format3::args = [this._0, this._1, this._2, this._3]

def Bytecode(op Int8, args Array) {
    mapping = inject 'llvm/bytcode/returncode_mapping'

    match args.length
    as 0 { llvm.Foramt1(op, null, null) }
    as 1 { llvm.Format1(op, args._0, null) }
    as 2 { llvm.Format1(op, args._0, args._1) }
    as 3 { llvm.Format2(op, args._0, args._1, args._2) }
    as 4 { llvm.Format3(op, args._0, args._1, args._2, args._3) }
    else { llvm.Format0(op, mapping[op], args.length, args.chunk) }
}

end

end llvm

module mara

datum Bytecode {
    val op Opcode
    val args Array

    test {
        assert this.args.length > 0
        assert this.args.length <= 4
    }
}

Opcode = Enum [
    call_:,
    for_:,
    if_:,
    match_:,
]

def Opcode::eval (Opcode.call_) {
    Call(this.args).eval
}

def Call::convert Bytecode {
    Bytecode(Opcode.call, [this.func, this.arg])
}


end mara


